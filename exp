[210428,29]
numpy : 고성능 과학(수치) 계산을 위한 데이터 분석(수치분석) 패키지
    - 벡터 산술연산
    - 다차원 배열 (ndarray)
    - 표준 수학 함수
    - 선형대수, 난수

numpy 배열 : 같은 종류의 데이터를 담는 자료형 (동일한 타입의 값)
        - rank : 배열의 차원 (ndim)
        - shape : 각 차원의 크기를 튜플로 리턴 (행, 열)
        - dtype : 배열에 저장된 자료(타입)를 알려주는 객체


    ndarray : 다차원 배열 객체
        - array() : 배열 생성
        - arange() : 배열 생성 시 지정 값까지 자동 생성
        - reshape() : 배열 모양 변경
        - zeros() : 0이 들어있는 배열 생성
        - ones() : 1이 들어있는 배열 생성
        - full() : 모든 값이 특정 상수인 배열을 생성
        - eye() : 단위 행렬 생성

    배열 인덱싱
        - 슬라이싱 : 파이썬 리스트를 다루는 것과 유사하게 numpy에서도 슬라이싱이 가능
                : 슬라이싱된 배열은 원본 배열과 같은 데이터를 참조함 -> 슬라이싱된 배열 수정하면 원본도 바뀜
                : numpy 배열을 슬라이싱하면 그 결과는 언제나 원본 배열의 부분 배열임.
        - 인덱싱 : numpy 배열 인덱싱은 팬시 인덱싱(fancy indexing)이라고도 함.
                : 배열 인덱싱의 유용한 기능 중 하나가 행렬의 각 행에서 하나의 요소를 선택하거나 바꾸는 기능
                : 정수 배열 인덱싱을 하는 경우는 원본과 다른 배열을 만들 수 있다.

    부울 인덱싱

    배열 연산
        - 기본은 배열의 각 요소별로 동작.
        - 수학함수, 연산자, numpy 함수 모듈을 통해 배열 연산이 가능

    조건식도 가능 => 부울로 리턴
    논리 연산
    인덱싱 정리 : 인덱스를 저장할 배열 생성해서, 원본 배열 a의 각 행에서 인덱스에 일치하는 값 추출하기
                                              원본 배열 a의 각 행에서 인덱스에 일치하는 값 추출하면서 연산하기도 가능
    부울 인덱싱으로 추출 - 짝수 구하기

    결측치 : 없다, 잘못된 데이터 ==> 결과값에 영향을 주므로 처리해야 함
    python : NaN(int), NULL(object)
    numpy : NaN
        np.isnan(a)  # NaN을 찾아서 True 리턴
        a[~np.isnan(a)]  # ~:not  ==> NaN이 아닌놈만 가져옴


[210429]
    numpy 기술 통계 (Descriptive statistics)
        - 분산(variance) : 데이터와 샘플 평균간 거리의 제곱의 평균
                : 이 값이 작으면 데이터가 모여있는 것, 크면 흩어져 있는 것
                : np.var(x)
        - 표준편차(standard deviation) : 분산의 제곱근 값
                : np.std(x)
        - 최대값(maximum) : np.max(x)
        - 최소값(minimum) : np.min(x)
        - 중앙값(median) : 데이터를 크기대로 정렬시 가준데의 수, 평균과 다름
                : 가장 가운데 있는 수가 2개이면 중앙 두 수의 평균 사용
                : np.median(x)
        - 사분위수(quartile) : 데이터를 크기대로 정렬하였을 때 1/4, 2/4, 3/4 위치에 있는 수
                : 1사분위수, 2사분위수, 3사분위수
                : 데이터가 100개라면 25번째 순서까지가 1사분위수
                : 위치를 1/100 단위로 나눈 백분위수(percentile)를 사용하기도 함
                  이 때는 1사분위수는 25%
                : np.percentile(x, 0)  # 최소값
                : np.percentile(x, 25) # 1사분위수
                : np.percentile(x, 50) # 2사분위수
                : np.percentile(x, 75) # 3사분위수
                : np.percentile(x, 100) # 최대값
        - 합계 : np.sum()
        - 여러개의 수를 연속하여 곱하기 : np.product()


선형대수(linear algebra) : 데이터 분석에 필요한 여러 계산을 돕기 위한 학문
     > 데이터 유형
        - 스칼라(scalar) : 하나의 숫자로 이루어진 데이터
        - 벡터(vector) : 여러 개의 숫자로 이루어진 데이터 (data record)
        - 행렬(matrix) : 벡터가 여러개 있는 데이터 집합

    numpy에서 벡터를 표현할 때 벡터를 열의 개수가 하나인 2차원 배열 객체로 표현하는 것을 권장, 다행 1열

    전치 행렬 : 행렬에서 가장 기본이 되는 연산 (행과 열을 바꾸는 연산)
             : 전치 연산으로 만들어진 행렬을 원래 행렬에 대한 전치행렬이라고 부른다

            print(x)
            print(x.T)  ==>  T 속성(Attribute)을 이용하여 전치 적용. T는 메소드가 아님

            x = np.array([2, 2, 3])
            print(x)
            print(x.T)  # rank=1인 ndarray는 전치 연산이 정의되지 않는다

    특수한 벡터와 행렬
    영벡터 : 모든 원소가 0인 n차원 벡터
    일벡터 : 모든 원소가 1인 n차원 벡터

    정방행렬(square matrix) : 행의 개수와 열의 개수가 같은 행렬

    대각행렬 : 모든 비대각 요소(off-diagonal)가 0인 정방 행렬
            : np.diag ==> 대각행렬을 만들때도 쓰지만 대각행렬을 넣어서 주요소 추출가능

    단위행렬 : 대각행렬중에서 모든 대각요소(주요소)값이 1인 대각행렬 (identity metrix)
            : np.identity, np.eye

    대칭행렬 : 전치 연산을 통해서 얻은 전치행렬과 원래의 행렬이 같은 경우 (sysmetric matrix)
            : 정방행렬만이 될 수 있다.


    벡터의 내적
    벡터의 공간에서 정의된 이중 선형(bilinear) 함수의 일종. inner product 또는 dot product라고 부름
    행렬 곱셈의 결과행렬은 앞 행렬의 행벡터와 뒤 행렬의 열벡터를 내적한 값을 스칼라로 가지는 행렬


BroadCasting
    모양(shape)이 다른 배열들 간의 연산이 어떤 조건을 만족했을 때 가능하도록 배열을 자동적으로 변환하는 것
        ex)
        1 2      + 10   => 원래는 연산이 안되지만  10 10 으로 캐스팅 되서 연산 가능
        3 4                                      10 10
    브로드캐스팅이 일어날 수 있는 조건
        - 차원 크기가 1, 즉 스칼라면 가능
        - 차원 크기가 1이 아니라면 차원의 짝이 맞는 조건 (축길이가 같을 때 등)

3차원 배열 - 이미지 처리할때 쓸 경우가 생김
    print(len(d))  # 깊이
    print(len(d[0]))  # 행
    print(len(d[0][0]))  # 열

배열 복사 - dtype 속성으로 자료형 정해줄 수 있음, i=int, f=float  ex) d2 = np.ones_like(d, dtype='f')
    다른 배열과 같은 형태의 배열을 만들고 싶을 때 : ones_like
    같은 형태 배열 : copy()
    대입으로도 가능

[210430]
matplot 


[210503]
    barchart
        barchart는 bar(세로방향), barh(가로방향)
        bar(x, y) : x축, y축

    histogram
        hist(bins=)  # bins : 데이터를 집계할 구간 정보   - 바그래프
        pie(ratio[비율], explode[간격], labels, colors, autopot[소수점 자리수], shadow, startangle[시작각])   - 파이그래프
            원의 형태 유지 : plt.axis('equal')
        스캐터 플롯(산점도 함수) : 두 개의 실수 데이터 집합의 상관관계를 살펴볼 때 많이 사용하는 차트
            scatter(X, Y)

    bubble chart    


pandas : 데이터 분석 기능을 제공하는 라이브러리
       : CSV, Excel, JSON 등의 데이터를 읽고 원하는 데이터 형식으로 변환
    pandas 자료 구조 : Series, DataFrame
    
    pandas 주요 특징들 파일 


DataScience
1. 문제 정의하기
    해결하고자 하는 문제를 정의
        목표 설정: 해결하고자 하는게 무엇인지
        기간 설정: 언제까지 어떤 결과물을 얻을 것인지
        평가 방법 설정
        필요한 데이터 설정: 어떤 방식으로 데이터를 활용할 것인지
2. 데이터 모으기
    필요한 데이터를 모을 수 있는 방법을 찾기
        웹 크롤링: 웹 사이트에서 직접 데이터를 수집
        자료 모으기: 누군가 이미 모아놓은 데이터를 그대로 사용, 공공기관에서 배포한 자료들
        파일 읽고 쓰기
3. 데이터 다듬기
    데이터의 퀄리티를 높여서 의미있는 분석이 가능하도록 하기
    garbage in, garbage out
        데이터 관찰
        데이터 오류 제거
        데이터 정리
4. 데이터 분석하기
    준비된 데이터로부터 의미를 찾기
        데이터 파악
        대이터 변형
        통계 분석
        인사이트 발견
        의미 도출
5. 커뮤니케이션
    분석 결과를 다른 사람들에게 전달
    어떤 문제를 해결하려 했는지, 어떻게 데이터를 모았는지, 어떤 방식으로 인사이트를 얻었는지
        다양한 시각화
        커뮤니케이션
        리포트

















-------------------------------------------------------------------------------------------------------
[210428,29]
<numpy>
intro_numpy.ipynb                 numpy, numpy 배열, ndarray 다차원 배열 객체, 배열 인덱싱, 슬라이싱, 부울 인덱싱
[210429]
<numpy>
numpyEx01.ipynb                   numpy 기술 통계, 선형대수, BroadCasting, 3차원 배열, 배열 복사 방법
[210430]    
matplot 한듯
[210503]
<visualize>
matplotEx2.ipynb                  barchart, histogram,
<pandas>
pandasEx01.ipynb                  pandas : Series, DataFrame
DataScience.ipynb                 
pandasEx02.ipynb                  색인 객체, 재색인, 보간
pandasEx03.ipynb                  연산

[210507]
intro_ml.ipynb
intro_ml2.ipynb
intro_ml3.ipynb                   Kaggle 기본 예제, 타이타닉 탑승자 데이터를 기반으로 생존자 예측해보기
intro_ml4.ipynb                   분류의 성능 평가 지표




























